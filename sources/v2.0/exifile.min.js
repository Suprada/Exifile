exifile = (function() {
    const metadat = {
        name: 'exifile',
        version: '2.0',
        tagline: 'Free your Scribd highlights from the cloud',
        description:
            'When you create highlights and notes when reading your Scribd books, there is no way to see them in one page or to download them. This bookmarklet helps you to excise and file those Scribd highlights.  It gives you a single clean page with all your notes and highlights which can be copies, and gives you the option to download it in plain text format or JSON format. The highlights and notes can also be downloaded in plain text or JSON format.',
        keywords: ['scribd', 'note', 'highlight'],
        author: 'Suprada Urval <suprada@suprada.com> (http://www.suprada.com)',
        bugs: { email: 'suprada@suprada.com' },
        homepage: 'http://www.oddumbrella.com/exifile',
        license: 'MIT'
    };
    const LOGGER_LEVEL = 'debug';
    const e = document.createElement('div');
    const hostName = location.hostname;
    const readPath = location.pathname.split('/')[1];
    let verticalScrolling = !1;
    let highlights = {};
    let bookHighlights = {};
    let anns = [];
    const LOGGER = {
        msg: 'logger message',
        verbose: function() {
            if (LOGGER_LEVEL === 'verbose') {
                console.log(this.msg);
            }
        },
        debug: function() {
            if (LOGGER_LEVEL === 'debug') {
                console.log(this.msg);
            }
        },
        info: function() {
            if (LOGGER_LEVEL === 'info') {
                console.log(this.msg);
            }
        }
    };
    initExifile();
    const closeModal = () => {
        LOGGER.verbose.call({ msg: 'in close modal' });
        const closeBtn =
            document.getElementsByClassName('icon-ic_close') && document.getElementsByClassName('icon-ic_close_small');
        if (closeBtn.length > 0) {
            ('in closing');
            closeBtn[0].click();
        }
    };
    const goToCoverPage = () => {
        LOGGER.verbose.call({ msg: 'in goToCoverPage' });
        const tocIcon = document.getElementsByClassName('icon-ic_toc_list');
        tocIcon[0].click();
        const tocParentDiv = tocIcon[0].parentElement.parentElement;
        const tocList = tocParentDiv.querySelector('ul');
        tocList.children[0].click();
    };
    function getLastPage(annotations) {
        LOGGER.verbose.call({ msg: 'in getLastPage' });
        let pageNums = [];
        pageNums = annotations.map(item => item.location.split(' ')[1]);
        return pageNums.reduce((a, b) => (a >= b ? a : b), 0);
    }
    function createTextFile(highlights) {
        textFile = '';
        displayText = '';
        displayText += '<ol class="all-quotes">';
        highlights.forEach(item => {
            textFile += '\n';
            displayText += '<li class="quote-style">';
            console.log(item);
            if (item.type === 'highlight') {
                displayText += '<span class="text">' + item.excerpt + '</span>';
                textFile += item.excerpt + '\n';
            } else if (item.type === 'note') {
                textFile += 'NOTE: ' + item.excerpt + '\n';
                displayText += '<br><span class="note">Note: ' + item.excerpt + '</span>';
            }
            textFile += 'LOCATION: ' + item.location + '\n';
            displayText += '<br><span class="page-number">' + item.location + '</span>';
            displayText += '</li>';
        });
        displayText += '</ol>';
        return { textFile: textFile, displayText: displayText };
    }
    function showButtons(e, highlights) {
        nameStub = 'Scribd.Highlights_' + highlights.title.split(' ').join('.');
        jsonFile = JSON.stringify(highlights);
        overlay = document.createElement('main');
        overlay.setAttribute('class', 'overlay-results');
        e.innerHTML = 'Done Loading Highlights';
        document.body.removeChild(e);
        document.body.appendChild(overlay);
        overlayHeaderDiv = document.createElement('header');
        overlayHeaderDiv.setAttribute('class', 'header-style');
        overlay.appendChild(overlayHeaderDiv);
        overlayButtons = document.createElement('div');
        overlayButtons.setAttribute('class', 'buttons-header');
        overlay.appendChild(overlayButtons);
        overlayTitle = document.createElement('h2');
        overlayTitle.innerHTML = highlights.title;
        overlayHeaderDiv.appendChild(overlayTitle);
        overlayAuthor = document.createElement('h4');
        overlayAuthor.innerHTML = highlights.authors;
        overlayHeaderDiv.appendChild(overlayAuthor);
        overlayISBN = document.createElement('h4');
        overlayISBN.innerHTML = 'ISBN: ' + highlights.isbn;
        overlayHeaderDiv.appendChild(overlayISBN);
        jsonButton = document.createElement('span');
        jsonButton.innerHTML =
            '<button class="button-style" onclick="download((nameStub+\'.json\'),jsonFile)">Download JSON</button>';
        overlayButtons.appendChild(jsonButton);
        obj = createTextFile(highlights.annotations);
        textFile = obj.textFile;
        displayText = obj.displayText;
        textButton = document.createElement('span');
        textButton.innerHTML =
            '<button style="padding: 10px; margin: 10px;" onclick="download((nameStub+\'.txt\'),textFile)">Download Text</button>';
        overlayButtons.appendChild(textButton);
        closeButton = document.createElement('div');
        closeButton.setAttribute('class', 'close-button');
        closeButton.innerHTML =
            '<button onclick="closeAll(overlay)" style="color: #000;background-color:  #fff;"">X</button>';
        overlay.appendChild(closeButton);
        divText = document.createElement('div');
        divText.setAttribute('class', 'highlights-text');
        divText.innerHTML = displayText;
        overlay.appendChild(divText);
        footer = document.createElement('div');
        footer.setAttribute('class', 'exifile-footer');
        footer.innerHTML = '<p>Exifile by Suprada | Free your Scribd highlights</p>';
        overlay.appendChild(footer);
    }
    function scrapeHighlights() {
        let pageHighlights = {};
        const elems = document.getElementsByClassName('highlight');
        if (elems.length > 0) {
            for (let el of elems) {
                const id = el.className.split(':')[1];
                if (pageHighlights[id]) {
                    pageHighlights[id].text.push(el.innerHTML);
                } else {
                    pageHighlights[id] = { id: id, text: [el.innerHTML] };
                }
            }
            return pageHighlights;
        }
        return null;
    }
    function scrollDownPage() {
        LOGGER.verbose.call({ msg: 'in scrollDownPage' });
        var buttonsContainer = document.getElementsByClassName('buttons_container');
        buttonsContainer[0].scrollIntoView();
    }
    function scrapeCurrentPage() {
        LOGGER.verbose.call({ msg: 'in scrapeCurrentPagek' });
        scrollDownPage();
        const scrapedHighlights = scrapeHighlights();
        const currentPage = Number(document.getElementById('footer').innerText.split(' ')[1]);
        const t = { scrapedHighlights: scrapedHighlights, currentPage: currentPage };
        return t;
    }
    function readBook(lastPage) {
        LOGGER.verbose.call({ msg: 'in readBook' });
        let currentPage = 0;
        let highlightsObj = {};
        let cntr = 1;
        let nb1 = [];
        let nb2 = [];
        let t = {};
        return new Promise((resolve, reject) => {
            let i = setInterval(function() {
                cntr++;
                t = scrapeCurrentPage();
                currentPage = t.currentPage;
                highlightsObj = Object.assign(highlightsObj, t.scrapedHighlights);
                nb1 = document.getElementsByClassName('only_next_btn');
                nb2 = document.getElementsByClassName('load_next_btn');
                if (nb1 && nb1.length > 0) {
                    nb1[0].getElementsByTagName('button')[0].click();
                } else if (nb2 && nb2.length > 0) {
                    nb2[0].click();
                } else {
                    clearInterval(i);
                    resolve(highlightsObj);
                }
                if (currentPage > lastPage) {
                    clearInterval(i);
                    resolve(highlightsObj);
                }
            }, 5000);
        });
    }
    function getNotesAndBookmarks() {
        let annotations = [];
        document.getElementsByClassName('icon-ic_overflowmenu')[0].parentElement.click();
        document.getElementsByClassName('icon-ic_notebook')[0].parentElement.click();
        const items = document.getElementsByClassName('annotation');
        if (items.length > 0) {
            for (let item of items) {
                const location = item.getElementsByClassName('page_num')[0].innerHTML;
                const type = item.getElementsByClassName('annotation_type')[0].innerHTML;
                const time = item.getElementsByClassName('time')[0].innerHTML;
                const excerpt = item.getElementsByClassName('excerpt')[0].innerHTML;
                if (excerpt && excerpt !== '' && excerpt !== 'No preview available') {
                    annotations.push({ location: location, type: type, time: time, excerpt: excerpt });
                }
            }
            closeModal();
            return annotations;
        }
        closeModal();
        console.log('no notes and bookmarks available in this book');
        return null;
    }
    function combineHighlights(val, annotations) {
        for (let item in val) {
            console.log(val[item]);
            val[item].combinedText = val[item].text.join(' ');
        }
    }
    function initExifile() {
        makeOverlay(e);
        setInitialOverlayMessage(e);
        verticalScrolling = isVerticalScrollingEnabled();
        if (verticalScrolling) {
            let p1 = new Promise((resolve, reject) => {
                highlights = getBookMeta(highlights);
                delayTimer(() => {
                    resolve(highlights);
                }, 3000);
            });
            p1
                .then(function(val) {
                    closeModal();
                    highlights.annotations = getNotesAndBookmarks();
                    if (highlights.annotations) {
                        const lastPage = getLastPage(highlights.annotations);
                        let p2 = new Promise((resolve, reject) => {
                            goToCoverPage();
                            delayTimer(() => {
                                resolve();
                            }, 2000);
                        });
                        p2
                            .then(() => {
                                console.log('in p2 resolve');
                                showButtons(e, highlights);
                            })
                            .catch(err => {
                                console.log('promise p2 failed', error);
                            });
                    } else {
                        LOGGER.info.call({ msg: 'no annotations. close all and go away' });
                    }
                })
                .catch(err => {
                    console.log('promise failed', error);
                });
        } else {
            e.innerHTML =
                '<h3>Vertical scrolling is not enabled.</h3><h3>Exifile will enable vertical scrolling.</h3><h3>Please click on exifile bookmarklet again after page reloads</h3>';
            LOGGER.info.call({
                msg:
                    'vertical scrolling is not enabled. Exifile will enable vertical scrolling. Please click on exifile bookmarklet again after page reloads'
            });
            enableVerticalScrolling();
        }
    }
    function enableVerticalScrolling() {
        LOGGER.verbose.call({ msg: 'in enableVerticalScrolling' });
        const query = window.location.search;
        window.location.href = window.location.origin + window.location.pathname + '?mode=standard';
    }
    function addCloseButton(e) {
        LOGGER.verbose.call({ msg: 'in addCloseButton' });
        const closeButton = document.createElement('div');
        closeButton.setAttribute('class', 'close-button-e');
        closeButton.innerHTML =
            '<button onclick="document.body.removeChild(document.getElementsByClassName(\'overlay-info\')[0])" style="color: #000;background-color:  #fff;"">X</button>';
        e.appendChild(closeButton);
    }
    function setInitialOverlayMessage(e) {
        LOGGER.verbose.call({ msg: 'in setInitialOverlayMessage' });
        if (hostName !== 'www.scribd.com') {
            e.innerHTML = '<h1>Login to your book at www.scribd.com to start.</h1>';
            addCloseButton(e);
        } else if (hostName === 'www.scribd.com' && readPath !== 'read') {
            e.innerHTML = '<h1>Please start reading book</h1>';
            addCloseButton(e);
        } else if (hostName === 'www.scribd.com' && readPath === 'read') {
            e.innerHTML = '<h1>Downloading</h1>';
        }
    }
    function makeOverlay(e) {
        LOGGER.verbose.call({ msg: 'in makeOverlay' });
        e.setAttribute('class', 'overlay-info');
        document.body.appendChild(e);
    }
    function isVerticalScrollingEnabled() {
        LOGGER.verbose.call({ msg: 'isVerticalScrollingEnabled' });
        if (document.getElementsByClassName('vertical_reader_container').length > 0) {
            return !0;
        }
        return !1;
    }
    function getBookMeta(obj) {
        LOGGER.verbose.call({ msg: 'in getBookMeta' });
        obj.title = document.title;
        obj.isbn = document.querySelector('meta[property="books:isbn"]').getAttribute('content');
        document.getElementsByClassName('icon-ic_overflowmenu')[0].parentElement.click();
        document.getElementsByClassName('icon-ic_abouttitle')[0].parentElement.click();
        delayTimer(() => {
            const arrAuthors = document.querySelectorAll('[itemprop="author"] a');
            const authors = [];
            arrAuthors.forEach(function(item) {
                authors.push(item.innerText);
            });
            obj.authors = authors.join(', ');
        }, 1000);
        return obj;
    }
    function delayTimer(f, n) {
        return setTimeout(() => {
            f();
        }, n);
    }
    closeAll = function(elem) {
        LOGGER.verbose.call({ msg: 'in closeAll' });
        document.body.removeChild(elem);
    };
    download = function download(filename, text) {
        LOGGER.verbose.call({ msg: 'in download' });
        var element = document.createElement('a');
        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
        element.setAttribute('download', filename);
        element.style.display = 'none';
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    };
})();
